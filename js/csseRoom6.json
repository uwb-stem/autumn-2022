{
    "csse": [
        {
            "time": "1:00 PM - 1:15 PM",
            "projectId": "csse-6-100",
            "title": "Building Anomaly-Detection",
            "studentName": "Hadi Tarhini ",
            "studentMajor": "CSSE",
            "projectType": "Internship - Oracle Corporation",
            "facultyAdvisor": "Dr. Johnny Lin",
            "posterLink": "./posters/csse/tarhini-hadi.png",
            "abstract": "I was a part of Oracle Corporation’s first generation of summer interns this year, working in a small team on a product that Oracle wanted us to help revamp so they could bring it to market once again. The product itself is a machine-learning tool called MSET that detects anomalies in ongoing processes, which is a simple kernel with an insanely broad reach: MSET is usable in any application that requires constant monitoring of something to ensure its stability, whether it’s a factory needing to ensure consistent operation of its machines or an outdoor project needing to be alerted when the weather changes or anything in the same vein.\n\nAs interns, we had three tasks to complete in the interest of bringing MSET to market: first, bring it out of the demo phase and let it handle datasets of real-world sizes; second, implement different types of data storage so we could test their performance; and third, explore running the code on the GPU instead of the CPU to test its performance there too.\n\nIn the end, we were able to complete the first two tasks and hopefully put MSET on track into turning into a viable product for Oracle’s clients, but the third proved too far away for us to reach. Even though my work was nominally on MSET, my talk is really a discussion of how to meet requirements in a small, remote, brand-new team where everybody is still finding their footing. Through test-piloting Oracle’s internship program, we learned the importance of three things in this respect:\n\nCommunication. It is vital to ensure everyone in the team has a direct line of communication to everyone else, and that they take care to use this line of communication with regular updates. This ensures nobody gets out of sync or feels left behind.\n\nThinking forward.\n\n We left MSET in a friendlier state than we received it: it’s no longer coupled to a specific data-storage solution and is instead easily extensible by whoever comes after us.\n\n “Thinking forward” also applies to managing one’s expectations, timeline-wise. Our mentors at Oracle now have a clearer picture than they initially had of the limits of what a small team of interns can accomplish in one summer. While I wish we had reached the GPU, it wasn’t viable.\n\nAll things considered, though, a success overall! Hopefully Oracle continues to develop the internship program."
        },
        {
            "time": "1:15 PM - 1:30 PM",
            "projectId": "csse-6-115",
            "title": "In-platform Notifications: A Third-party API Solution to Implement Real-time Notifications",
            "studentName": "Arkar Kyaw Swar",
            "studentMajor": "CSSE",
            "projectType": "Internship - Medallion",
            "facultyAdvisor": "Dr. Johnny Lin",
            "posterLink": "./posters/csse/swar-arkarkyaw.png",
            "abstract": "As my capstone project, I chose to do an internship at a healthcare startup company called Medallion that provides healthcare organizations with a provider network management platform. Medallion’s mission is to automate the credentialing, licensing, and compliance for the healthcare providers.\n\n Before I joined the company, their web application was using emails for their notifications and some of the emails are aggregated and not real-time. Hence, the in-platform notification system where the users can receive real-time notifications and will not have to leave the application to read the notifications became a priority project.\n\n I chose to use a third-party API called Stream API that can save and manage our notifications as this method was more cost and time efficient than implementing the feature from scratch and storing the notifications ourselves. Each of our users will have a “feed” in Stream API and the notifications for each user are stored in their corresponding feeds. When a user logs in, the application’s front-end fetches that user’s notifications from Stream and render them in the dropdown menu. I managed to generate two new types of notifications for the internal users during my internship.\n\n Although this is still a small feature in the application, it is a necessity. It helps the internal users to stay up to date with the notifications. As the feature improves, it will become only more useful and eventually expand so that even the external users will have access to the notifications feature. "
        },
        {
            "time": "1:30 PM - 1:45 PM",
            "projectId": "csse-6-130",
            "title": "FrontEnd Intern @ VISA Inc.",
            "studentName": "Diego Guadarrama",
            "studentMajor": "CSSE",
            "projectType": "Internship - Visa Inc.",
            "facultyAdvisor": "Dr. Wooyoung Kim",
            "posterLink": "./posters/csse/guadarrama-diego.jpg",
            "abstract": "During my capstone experience, I defined a set of UI screens and built a prototype frontend web application connected to a Node JS API to show to our stakeholders and assess whether the product would meet all requirements and the cases needed by their team. \n\nThe Global Client Testing team (GCT) had been using an outdated application named 'Transcan,' despite using old technology and having an outdated UI, Transcan worked well enough that the team never needed a replacement. Yet the product would stop receiving support from its supplier beginning September 2023. As a result, VISA needed to find a solution to the absence of this program because it was one of the team's primary software tools they used daily. Beginning my capstone experience, I was assigned to meet with the GCT team and design this project from the ground up. Offering the GCT team the ability to decide what features they wanted to keep from the old program and which new features they wished to incorporate into the latest product, named the 'Message Monitoring Tool.'\n\nUpon the completion of this project, the company is estimated to save 50K annually and increase productivity by 30% - 50% because the updated tech stack would offer faster performance results and give the GCT team more tools and a friendly UI. Ultimately, despite the GCT team not getting all their requested features, as their demands needed to be revised to justify spending more resources and time. Overall, they significantly upgraded their program’s capability and feature sets. "
        },
        {
            "time": "1:45 PM - 2:00 PM",
            "projectId": "csse-6-145",
            "title": "SDET Internship @ Costco Travel",
            "studentName": "Hao Duong",
            "studentMajor": "CSSE",
            "projectType": "Internship - Costco Travel",
            "facultyAdvisor": "Dr. David Socha",
            "posterLink": "./posters/csse/duong-haoduc.png",
            "abstract": "My capstone project is a sponsored internship at Costco Travel which provides leisure travel to Costco members across North America. During my time at Costco, I joined the Engineering Productivity team which is responsible for increasing productivity of developers and QA focusing on automation and performance testing.\n\nWhen it comes to investigating issues between environments, we still face a lot of challenges. Checking differences across environments manually is not productive and costs time. My main project as a software development in test intern is to build an environment comparison tool to support multi-environment configuration comparison to let users know all the differences between the environments in a split second. With this tool in place, we no longer need to worry about the minute differences that might be overlooked with manual efforts.\n\nMy work on this project was focusing on creating a new backend service alongside a new frontend for the tool using Spring Boot and a React framework called Next.js. Before working on the project, the main challenge was getting up to speed with Spring Boot and React from the help of my mentors as well as everyone from my team to learn the fundamentals of the technologies along with related tools in order to complete the task.\n\nDuring my internship, I created new React components and sent requests back to APIs that I created in the backend which sent queries to multiple databases across environments to serve the request. This was quite challenging as we have a lot of environments which contain many different configurations. I spend a considerable amount of time learning the concept of multi-tenancy to help solve this problem and understand how to apply it in Spring Boot.\n\n By the time my internship was coming to an end, I had managed to support up to 6 different environments for configuration comparison which users of the tool can select between any environments to compare against.\n\n Overall, I had a great internship experience at Costco Travel and my team supported me throughout my stay. I was able to learn how to develop in a professional setting and it gave me an opportunity to interact with technologies that I hadn’t had a chance to touch in my previous classes. "
        },
        {
            "time": "2:00 PM - 2:15 PM",
            "projectId": "csse-6-200",
            "title": "Unix With Us",
            "studentName": "Ashlyn Bui",
            "studentMajor": "CSSE",
            "projectType": "Student Defined - Group Project",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/bui-ashlyntrami.jpg",
            "abstract": "Students new to the UWB CSS curriculum enrolled in CSS342 are introduced to an immense amount of information. As one of the starting fundamental classes, the course introduces students to many different concepts with a focus on data structures and algorithms. Concepts, such as Unix, which are important to understand and know, are briefly touched upon but never fully explained. The purpose of this group project was to create a comprehensive, interactive beginner course for CSS 342 and undergrad students to familiarize them with Unix and 50 of its most basic commands.\n\nBefore starting the project, a survey was done to see which learning style, interactive or non-interactive, students thought helped them learn concepts more efficiently. The survey was hosted on Google forms and distributed to UWB students through Discord servers. Results showed that 81.3% of students preferred interactive learning to non-interactive. Outcomes from a past study on the effects of the interactive application Linux Gym were also considered and showed that 96% of student participants found that the application helped them learn better, decreasing high postgraduate student failure rates to practically 0%, and motivated them to practice.\n\nAs each member of the group had no experience with website development or the ReactJS framework, much time was spent researching hundreds of different internet materials and reaching out to others. Development was done using Reactjs in weekly iterations. Core elements for the website consisted of compact explanations, a quiz component, and a section where students could try out commands and see what they do.  Each time a prototype was created, feedback from students on usability and content was gathered in the form of a Google forms survey and in-person usability tests and interviews.\n\n Results from the last round of feedback showed positive responses from students trying out the website. Out of the students interviewed and tested, 100% of them said that they would use this website, some said they would even use it over others such as W3Schools, and that they would recommend this website to other students. One student even noted that they liked the website more than the CSS342 accompanying lab course, and they thought that the website could replace it. There is still much room for improvement, such as adding in more information and refining more on the components and layout, but this project serves as a compact, effective tool for helping students learn the basics of Unix."
        },
        {
            "time": "2:15 PM - 2:30 PM",
            "projectId": "csse-6-215",
            "title": "Unix With Us",
            "studentName": "Thinh Dang",
            "studentMajor": "CSSE",
            "projectType": "Student Defined - Group Project",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/dang-thinhphu.jpg",
            "abstract": "In order to stand out among others in software engineer career, having full authority in issuing computer commands to optimize jobs is very necessary. Therefore, knowing Unix operating system as well as Unix commands to efficiently interact with the computer should be in a study list for every entry level CSS student. As UW Bothell student, it is quite beneficial to prior know fundamental Unix/ Linux commands skill before enrolling to the CSSE major. Therefore, in this Capstone project, I decided to build an interactive website for entry level students to boost up the Unix command skill.\n\nThe interactive web application serves the objective of showing students Unix commands utilizing text-based material, interactive components including flashcard, quiz, and graphic terminal practice visualization.  These interactive exercises assist students to engage with the learning materials and are particularly useful for advanced preparation for CSS342, CSS343, or CSS430.\n\nThe webpage focuses on widely used commands (approximately 60 commands). The pace of the study is self-learned. Students read briefly over the description of commands. Then, they can practice seeing how commands operate. After comprehending, students check their knowledge by performing a quiz. To ace the assessment, the website offers flashcard feature so that students can review quickly.\n\nAfter doing usability testing on over hundreds of students at UW. The majority of students voted that it has inspired them to learn and practice Linux commands more because students are able to actively solve problems for themselves rather than relying on the concept. Moreover, the website also gauges their skills before exam, and hence were more prepared for the Linux Lab.\n\nAs a result, 86% of students prefer our website to the passive websites (e.g. CSS Wiki or W3school) and will recommend it to other students. To sum up, The Unix with Us interactive learning is a great resource for students to familiarize themselves with Unix Commands by encouraging students actively participate in the entire learning process."
        },
        {
            "time": "2:30 PM - 2:45 PM",
            "projectId": "csse-6-230",
            "title": "Query Engine for Time Series Data",
            "studentName": "Richard Guan",
            "studentMajor": "CSSE",
            "projectType": "Internship - Sumo Logic",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/guan-richard.jpg",
            "abstract": "For my capstone, I did a sponsored internship with Sumo Logic, which is a SaaS company that provides a cloud-based platform for application observability. I was a backend engineering intern in the Metrics team, which owns the query engine component of Sumo Logic’s Metrics product. \n\nI was assigned to deliver three user-facing query operators to expand Sumo’s APM (Application Performance Management) offerings. Companies use APM tools to ensure they deliver an expected service level, as measured by performance metrics. \n\nThe three query operators are: \n\n1. delta:\n\nThis operator computes the backward difference at each data point in the time series to determine how much the metric has changed from its last value in the series. \n\n2. where:\n\n This operator filters data points within a time series metric by evaluating it with a boolean expression. \n\n3. histogram percentile:\n\nThis operator computes the n-th percentile value within a time series.\n\n I started my projects by clarifying the user requirement with product management. I wrote design documents to lay out my solutions and have them reviewed by the senior engineers in my team. I implemented my solutions within the internship‘s timeframe and made sure I was adhering to the company’s coding best practices. To wrap up my project, I set up logging and dashboards to ensure that other engineers could debug in case a problem occurs. The operators I delivered enabled users to perform more advanced queries in Sumo, and gave them additional insights in how they’re applications are running. "
        },
        {
            "time": "2:45 PM - 3:00 PM",
            "projectId": "csse-6-245",
            "title": "Business Intelligence Engineering Internship Project",
            "studentName": "Shushmitha Radjaram",
            "studentMajor": "CSSE",
            "projectType": "Internship",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/radjaram-shushmitha.jpg",
            "abstract": "For my capstone, I will be discussing the project I did for my Business Intelligence (BI) Engineering Internship. BI Engineering entails creating and monitoring metrics that indicate product performance, often in terms of customer engagement trends, managing your organization’s data infrastructure, and building BI Solutions to answer business questions with data. These BI solutions mainly consist of datasets, queries, reports, dashboards, and analyses.\n\nThe goal of my internship project was to make the process of retrieving data and insights on customer engagement through an existing Self-Service Customer Segment Exploration Platform one that does not require technical fluency in SQL and/or Python and knowledge of tables and fields containing relevant data. \n\nPrior to my internship, my team had identified a company-internal Self-Service Customer Segment Exploration Platform as a possible solution for non-BI Engineers to query customer engagement data and obtain insights from it themselves. It was my responsibility to determine if and how this platform would be a good solution, modify it to be more useful to members of my organization, and instruct members on how to use it.\n\n I updated the Self-Service Customer Segment Exploration Platform Platform’s backend data load job queries to onboard all the fields that my organization uses to monitor customer engagement on 3 specific features of the product we manage. I ensured backend queries generated when creating customer segments on the Platform were consistent with queries for existing metrics used to track customer engagement and that both queries were returning similar results. I modified my org’s version of the Platform to align with our needs and goals which included creating commonly tracked customer segments used by my org on it.\n\nAs a result of the work I did for my project, members of my organization were better versed with the Self-Service Customer Segment Exploration Platform. Prior to this, they understood it at a surface level and were skeptical on whether it was worth making the switch to use it as their main mode of ad-hoc data and insight collection. In addition, BI Engineers and Data Engineers now know how to update and analyze the data load job and backend queries generated by the platform so that it could be maintained after my internship. "
        },
        {
            "time": "3:00 PM - 3:15 PM",
            "projectId": "csse-6-300",
            "title": "Ad Workflow Analyzer UI Improvement",
            "studentName": "Samuel Stewart",
            "studentMajor": "CSSE",
            "projectType": "Internship - Amazon",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/stewart-samuel.PNG",
            "abstract": "As my capstone project, I worked as a Software Engineer Intern at Amazon as a member of the Ad Supply Engineering (ASPEN) team. My team was part of the Onsite Monetization organization and was responsible for managing ad services for serving display ads and video on Amazon’s Owned & Operated web surfaces. To serve ads on Amazon, ASPEN manages a distributed ad service built of numerous smaller infrastructure building blocks working together as the “ad serving workflow”.\n\nThe project I was given to complete during my internship was to create an improved version of the Ad Workflow Analyzer, an internal tool used to view the detailed API requests and responses from each ad service in the ad serving workflow. As the number of ads on pages grew, the tool had difficulties keeping up, resulting in time-outs and negative behavior visible to users. The debug traces published by the tool were also difficult for non-tech users in the organization to understand, and users would need to spend lots of time to discover important information in a single trace. My goals for improving the tool were to improve performance by reducing latency of requesting a trace, and to create an improved UI so users can better understand the traces.\n\nThe new Ad Workflow Analyzer that I created was a single page web application built upon a Vue.js framework that mimicked the interface of the old UI. I used the existing backend Coral service to make more specific API calls that reduced latency and load times in the tool. I also created a series of trace helper scripts that consolidated key information from JSON trace data and displayed it to users. Through the use of existing tools, plugins, and scripts, I was able to iteratively improve the tool throughout my time at Amazon.\n\nMy internship at Amazon introduced me to iterative development as well as a fast-paced, customer obsessed environment. I was able to work with different developers to learn about different services and was inspired to take pride and ownership in my work. I got to understand how agile software development environments run, and actively participate in making a product that had great benefit to its users."
        }, 
        {
            "time": "3:15 PM - 3:30 PM",
            "projectId": "csse-6-315",
            "title": "Software Development Engineer Internship at Amazon",
            "studentName": "Neil Wiborg",
            "studentMajor": "CSSE",
            "projectType": "Internship - Amazon",
            "facultyAdvisor": "Dr. Yusuf Pisan",
            "posterLink": "./posters/csse/wiborg-neil.png",
            "abstract": "For my capstone, I joined Amazon as a software development engineer intern. The team I was on was part of the Amazon Web Services Elastic Compute Cloud (EC2) Control Plane. My team was the EC2 Cell Platform team, and one of their responsibilities was provisioning new cells for EC2. Cells, simply put, are a way to increase the scalability of EC2 and reduce the blast radius of outages.\n\nThe process that my team used to provision cells involved using a command-line interface (CLI) tool to generate new cell data, then submit a code review (CR) to have some guarantee the data was accurate, and then use another CLI tool to add the new cell to production. This approach was not ideal because a mistake could sneak through the code review process and be pushed to production. My intern project was to create a web frontend that would generate cell data through a simple form, allowing a one-click process to provision new cells.\n\nIn order to create a product that would satisfy all the requirements of my team, I met with multiple team members to get an idea of what they were looking for. At Amazon there is a big focus on taking ownership of your project, so when team members had conflicting ideas of what they wanted, it was up to me to decide what would be best for my project.\n\nMy team had an agile workflow. Every day we would meet for standup to discuss what we have been working on, and what blockers we had. A sprint lasted two weeks, and at the end of every sprint we would meet for a demo session where we had an opportunity to show what we had been working on and to get feedback. I used this opportunity every sprint to see if my project was on the right track.\n\nThere were multiple times during my internship that my manager was out sick. During these times, I took charge and led our team through daily standup, as well as our sprint retro and demo session.\n\nIn order to develop my project, I had to learn full stack development.  I wrote a React frontend, a Kotlin backend that ran on AWS Lambda, and I added functionality to a database that was powered by AWS DynamoDB.\n\nThis experience at Amazon taught me the skills I need to become a software engineer. I learned how agile development is done at a real tech company, and I was able to explore technologies that my classes at UW Bothell did not cover."
        }                  
    ]
}